name: Deploy to EC2 from BE

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push to Docker image to aditya-resume-backend
        run: |
          IMAGE_NAME=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu
            sudo rm -f .env-backend
            
            echo "writing secrets to .env-backend file"
            sudo bash -c "cat <<EOF > .env-backend
            ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DOCKERHUB_REPO=${{ secrets.DOCKERHUB_REPO }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            EC2_HOST=${{ secrets.EC2_HOST }}
            EC2_KEY=${{ secrets.EC2_KEY }}
            EC2_USER=${{ secrets.EC2_USER }}
            GOOGLE_ACCESS_KEY_BASE64=${{ secrets.GOOGLE_ACCESS_KEY_BASE64 }}
            GOOGLE_RECAPTCHA_V3_SECRET_KEY=${{ secrets.GOOGLE_RECAPTCHA_V3_SECRET_KEY }}
            HUGGINGFACE_ACCESS_TOKEN=${{ secrets.HUGGINGFACE_ACCESS_TOKEN }}
            NOREPLY_EMAIL=${{ secrets.NOREPLY_EMAIL }}
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
            EOF"
            
            echo "restarting the application..."
            sudo docker-compose down || true
            echo "removing all stopped containers"
            sudo docker container prune -f || true
            echo "removing the existing image on the server"
            sudo docker rmi docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest || true
            echo "pulling the latest image from docker hub"
            sudo docker pull docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest
            echo "restarting the application"
            sudo docker-compose up -d